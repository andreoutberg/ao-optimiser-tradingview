//@version=6
strategy("AO Optimiser", "AO Opt", overlay=true, max_bars_back=5000, default_qty_type=strategy.percent_of_equity, default_qty_value=10)

// ╔══════════════════════════════════════════════════════════════════════════════╗
// ║                             AO OPTIMISER                                     ║
// ║                                                                              ║
// ║  Sophisticated TradingView Pine Script v6 strategy for analyzing external    ║
// ║  trading signals with statistical analysis and risk management, designed     ║
// ║  for high-volume watchlist scanning.                                         ║
// ║                                                                              ║
// ║  Repository: https://github.com/andreoutberg/ao-optimiser-tradingview        ║
// ║  Status: Strategy Development Phase                                          ║
// ╚══════════════════════════════════════════════════════════════════════════════╝

// ┌──────────────────────────────────────────────────────────────────────────────┐
// │                            EXTERNAL SIGNAL INGESTION                         │
// └──────────────────────────────────────────────────────────────────────────────┘

// Signal Source Selection
signal_source = input.string("Manual", "Signal Source", options=["Manual", "Demo Connector", "External Indicator"],
     tooltip="Choose signal source: Manual for testing, Demo for auto-signals, External for real indicators")

// Manual/External Signal Input
external_signal = input.float(0, "Manual/External Signal", 
     tooltip="Manual testing or external indicator connection. Format: BUY=+1, SELL=-1, NO SIGNAL=0")

// Demo Signal Generator (for testing and development)
demo_threshold = input.float(1.0, "Demo Signal Threshold %", minval=0.1, maxval=5.0, step=0.1,
     tooltip="Demo mode: BUY when price moves up by this %, SELL when down by this %")

// Calculate demo signals
price_change_pct = math.abs(close - close[1]) / close[1] * 100
demo_buy_signal = close > close[1] and price_change_pct >= demo_threshold
demo_sell_signal = close < close[1] and price_change_pct >= demo_threshold

// Select signal source
raw_signal = signal_source == "Manual" ? external_signal :
             signal_source == "Demo Connector" ? (demo_buy_signal ? 1 : demo_sell_signal ? -1 : 0) :
             external_signal  // External Indicator mode

// Signal Processing
signal_direction = raw_signal >= 1 ? 1 : raw_signal <= -1 ? -1 : 0
is_buy_signal = signal_direction == 1
is_sell_signal = signal_direction == -1
is_new_signal = signal_direction != 0 and signal_direction != signal_direction[1]

// ┌──────────────────────────────────────────────────────────────────────────────┐
// │                            STRATEGY SETTINGS                                 │
// └──────────────────────────────────────────────────────────────────────────────┘

// Trade Management
position_size = input.float(10, "Position Size %", minval=1, maxval=100, step=1,
     tooltip="Percentage of equity per trade")
tp1_distance = input.float(1.2, "TP1 Distance %", minval=0.1, maxval=10.0, step=0.1,
     tooltip="Take Profit 1 distance from entry")
tp2_distance = input.float(2.5, "TP2 Distance %", minval=0.1, maxval=20.0, step=0.1,
     tooltip="Take Profit 2 distance from entry") 
tp3_distance = input.float(5.0, "TP3 Distance %", minval=0.1, maxval=50.0, step=0.1,
     tooltip="Take Profit 3 distance from entry")
sl_distance = input.float(2.0, "Stop Loss %", minval=0.1, maxval=20.0, step=0.1,
     tooltip="Stop Loss distance from entry")

// Partial Exit Settings  
tp1_exit_pct = input.float(33, "TP1 Exit %", minval=10, maxval=100, step=5,
     tooltip="Percentage of position to close at TP1")
tp2_exit_pct = input.float(33, "TP2 Exit %", minval=10, maxval=100, step=5,
     tooltip="Percentage of remaining position to close at TP2")
// TP3 will close remaining position (100%)

// ┌──────────────────────────────────────────────────────────────────────────────┐
// │                              FILTER SETTINGS                                 │
// └──────────────────────────────────────────────────────────────────────────────┘

// Critical Filter Settings for Watchlist Scanning
tp1_min_profit = input.float(1.2, "TP1 Minimum Profit %", minval=0.1, maxval=10.0, step=0.1,
     tooltip="Minimum required profit percentage for TP1")
tp_success_threshold = input.int(90, "TP1 Success Rate %", minval=50, maxval=100, step=1,
     tooltip="Minimum required hit rate for TP1 (default: 90%)")
max_drawdown_limit = input.float(2.1, "Average Drawdown Limit %", minval=0.5, maxval=20.0, step=0.1,
     tooltip="Maximum tolerable drawdown percentage")
min_trade_history = input.int(50, "Minimum Trade History", minval=10, maxval=100, step=5,
     tooltip="Minimum number of historical trades required for analysis")
confidence_threshold = input.int(85, "Confidence Threshold %", minval=50, maxval=100, step=1,
     tooltip="Minimum confidence level for signal validation")

// ┌──────────────────────────────────────────────────────────────────────────────┐
// │                           OPERATIONAL SETTINGS                               │
// └──────────────────────────────────────────────────────────────────────────────┘

// Entry and Risk Management
entry_offset = input.float(0.1, "Entry Offset %", minval=0.0, maxval=2.0, step=0.1,
     tooltip="Entry delay allowance (+0.1% offset for all calculations)")
cooldown_period = input.int(24, "Cooldown Period (bars)", minval=1, maxval=168, step=1,
     tooltip="Configurable bar-based cooldown (e.g., 24 bars = 24 hours on 1H)")

// Alert Settings
alerts_enabled = input.bool(true, "Enable Alerts", tooltip="Toggle alert system ON/OFF")
alert_rate_limit = input.int(5, "Max Alerts per Hour", minval=1, maxval=20, step=1,
     tooltip="Maximum alerts per hour across all assets (optional)")

// Development/Testing Settings
testing_mode = input.bool(true, "Testing Mode", tooltip="Bypass filters for testing - shows all signals")
show_signal_plots = input.bool(true, "Show Signal Plots", tooltip="Display signal data in data window for debugging")
enable_strategy_trades = input.bool(true, "Enable Strategy Trades", tooltip="Actually execute trades (vs just analyze signals)")

// ┌──────────────────────────────────────────────────────────────────────────────┐
// │                            VARIABLE INITIALIZATION                           │
// └──────────────────────────────────────────────────────────────────────────────┘

// Strategy state tracking
var int cooldown_bars_remaining = 0

// Validation Functions
validate_signal_strength(confidence) =>
    confidence >= confidence_threshold

// ┌──────────────────────────────────────────────────────────────────────────────┐
// │                        PERFORMANCE ANALYSIS & FILTERING                      │
// └──────────────────────────────────────────────────────────────────────────────┘

// Get strategy performance metrics
total_trades_strategy = strategy.closedtrades
winning_trades = strategy.wintrades
losing_trades = strategy.losstrades
net_profit = strategy.netprofit
max_drawdown = strategy.max_drawdown

// Calculate success rates from strategy results
strategy_win_rate = total_trades_strategy > 0 ? math.round(winning_trades / total_trades_strategy * 100, 1) : 0
strategy_avg_win = winning_trades > 0 ? strategy.grossprofit / winning_trades : 0
strategy_avg_loss = losing_trades > 0 ? strategy.grossloss / losing_trades : 0

// Three-Check Filter System (using strategy data)
tp_success_check = total_trades_strategy >= min_trade_history and strategy_win_rate >= tp_success_threshold
tp1_profit_check = strategy_avg_win >= tp1_min_profit // Using average win as proxy for TP1 profit
drawdown_check = total_trades_strategy >= min_trade_history and math.abs(max_drawdown) <= max_drawdown_limit

// Overall Filter Status  
all_checks_pass = tp_success_check and tp1_profit_check and drawdown_check

// Signal and Trade Logic
show_signal_label = is_new_signal and cooldown_bars_remaining <= 0  // Always show labels when there's a new signal

// Trade approval - in testing mode, bypass strict filters
execute_trade = if testing_mode
    show_signal_label and enable_strategy_trades
else
    show_signal_label and all_checks_pass and validate_signal_strength(confidence_threshold) and enable_strategy_trades

// Update cooldown
if cooldown_bars_remaining > 0
    cooldown_bars_remaining -= 1

// ┌──────────────────────────────────────────────────────────────────────────────┐
// │                             STRATEGY EXECUTION                               │
// └──────────────────────────────────────────────────────────────────────────────┘

// Calculate TP and SL levels
var float entry_price_long = na
var float entry_price_short = na

// Strategy Entry Logic
if execute_trade and is_buy_signal and strategy.position_size == 0
    entry_price_long := close * (1 + entry_offset / 100)
    strategy.entry("Long", strategy.long)
    cooldown_bars_remaining := cooldown_period

if execute_trade and is_sell_signal and strategy.position_size == 0  
    entry_price_short := close * (1 - entry_offset / 100)
    strategy.entry("Short", strategy.short)
    cooldown_bars_remaining := cooldown_period

// Strategy Exit Logic - Long Positions
if strategy.position_size > 0 and not na(entry_price_long)
    tp1_long = entry_price_long * (1 + tp1_distance / 100)
    tp2_long = entry_price_long * (1 + tp2_distance / 100)
    tp3_long = entry_price_long * (1 + tp3_distance / 100)
    sl_long = entry_price_long * (1 - sl_distance / 100)
    
    strategy.exit("TP1_Long", "Long", limit=tp1_long, stop=sl_long, qty_percent=tp1_exit_pct)
    strategy.exit("TP2_Long", "Long", limit=tp2_long, stop=sl_long, qty_percent=tp2_exit_pct)  
    strategy.exit("TP3_Long", "Long", limit=tp3_long, stop=sl_long, qty_percent=100)

// Strategy Exit Logic - Short Positions  
if strategy.position_size < 0 and not na(entry_price_short)
    tp1_short = entry_price_short * (1 - tp1_distance / 100)
    tp2_short = entry_price_short * (1 - tp2_distance / 100)
    tp3_short = entry_price_short * (1 - tp3_distance / 100)
    sl_short = entry_price_short * (1 + sl_distance / 100)
    
    strategy.exit("TP1_Short", "Short", limit=tp1_short, stop=sl_short, qty_percent=tp1_exit_pct)
    strategy.exit("TP2_Short", "Short", limit=tp2_short, stop=sl_short, qty_percent=tp2_exit_pct)
    strategy.exit("TP3_Short", "Short", limit=tp3_short, stop=sl_short, qty_percent=100)

// Reset entry prices when position closes
if strategy.position_size == 0
    entry_price_long := na
    entry_price_short := na

// ┌──────────────────────────────────────────────────────────────────────────────┐
// │                            DASHBOARD DISPLAY                                 │
// └──────────────────────────────────────────────────────────────────────────────┘

// Primary Status Display (using strategy data)
dashboard_bg_color = all_checks_pass ? color.new(color.green, 90) : color.new(color.red, 90)
text_color = all_checks_pass ? color.white : color.yellow

// Status Indicators (using strategy data)
tp_success_display = strategy_win_rate >= tp_success_threshold ?
     "✅ Win Rate: PASS (" + str.tostring(strategy_win_rate, "#.#") + "%)" :
     "❌ Win Rate: FAIL (" + str.tostring(strategy_win_rate, "#.#") + "%)"

tp1_profit_display = tp1_profit_check ?
     "✅ Avg Win: PASS (" + str.tostring(strategy_avg_win, "#.#") + "%)" :
     "❌ Avg Win: FAIL (" + str.tostring(strategy_avg_win, "#.#") + "%)"

drawdown_display = math.abs(max_drawdown) <= max_drawdown_limit ?
     "✅ Max DD: PASS (" + str.tostring(math.abs(max_drawdown), "#.#") + "%)" :
     "❌ Max DD: FAIL (" + str.tostring(math.abs(max_drawdown), "#.#") + "%)"

// Enhanced Dashboard with Strategy Metrics
if barstate.islast
    dashboard_text = "🔔 Alerts: " + (alerts_enabled ? "ON" : "OFF") + "\n" +
                     "📡 Source: " + signal_source + "\n" +
                     "🧪 Testing: " + (testing_mode ? "ON" : "OFF") + "\n" +
                     "📊 Trades: " + str.tostring(total_trades_strategy) + " | P&L: " + str.tostring(net_profit, "#.##") + "\n" +
                     tp_success_display + "\n" +
                     tp1_profit_display + "\n" +
                     drawdown_display
    
    // Display dashboard in top-right corner
    var label dashboard_label = na
    label.delete(dashboard_label)
    dashboard_label := label.new(
         x=bar_index, y=high, 
         text=dashboard_text, 
         style=label.style_label_down,
         color=dashboard_bg_color, 
         textcolor=text_color,
         size=size.small)

// ┌──────────────────────────────────────────────────────────────────────────────┐
// │                               ALERT SYSTEM                                   │
// └──────────────────────────────────────────────────────────────────────────────┘

// Alert System (TODO: Phase 4 - Discord alert format implementation)
if execute_trade and alerts_enabled
    signal_type = is_buy_signal ? "BUY" : "SELL"
    entry_price_formatted = str.tostring(close, format.mintick)
    
    // Basic alert (will be enhanced in Phase 4 with Discord formatting)
    alert_text = "AO Optimiser Alert: " + signal_type + " signal for " + syminfo.ticker + " at " + entry_price_formatted
    
    alert(alert_text, alert.freq_once_per_bar)

// ┌──────────────────────────────────────────────────────────────────────────────┐
// │                              VISUAL ELEMENTS                                 │
// └──────────────────────────────────────────────────────────────────────────────┘

// Chart Labels - ALWAYS show when there's a signal (regardless of filter approval)
if show_signal_label
    label_color = is_buy_signal ? color.new(color.green, 20) : color.new(color.red, 20)
    label_text_content = is_buy_signal ? "Long" : "Short"
    
    // Add indicators for filter status and trade execution
    filter_indicator = all_checks_pass ? "✅" : "❌" 
    trade_indicator = execute_trade ? "🚀" : "⏸️"
    
    label_text = label_text_content + " " + filter_indicator + " " + trade_indicator
    label_yloc = is_buy_signal ? yloc.belowbar : yloc.abovebar
    label_style = is_buy_signal ? label.style_label_up : label.style_label_down
    
    label.new(bar_index, high, label_text, 
              yloc=label_yloc,
              color=label_color, 
              style=label_style,
              textcolor=color.white, 
              size=size.small)

// Signal Plots (for development and debugging)
plot(show_signal_plots ? signal_direction : na, "Signal Direction", color=color.blue, display=display.data_window)
plot(show_signal_plots ? (all_checks_pass ? 1 : 0) : na, "Filter Status", color=color.orange, display=display.data_window)
plot(show_signal_plots ? (testing_mode ? 1 : 0) : na, "Testing Mode", color=color.purple, display=display.data_window)
plot(show_signal_plots ? (show_signal_label ? 1 : 0) : na, "Show Label", color=color.yellow, display=display.data_window)
plot(show_signal_plots ? (execute_trade ? 1 : 0) : na, "Execute Trade", color=color.green, display=display.data_window)
plot(show_signal_plots ? strategy.position_size : na, "Position Size", color=color.red, display=display.data_window)

// ┌──────────────────────────────────────────────────────────────────────────────┐
// │                            DEVELOPMENT STATUS                                │
// └──────────────────────────────────────────────────────────────────────────────┘

// STRATEGY APPROACH - Now using TradingView's built-in backtester!
// ✅ Real trade execution and tracking
// ✅ Automatic P&L and drawdown calculation  
// ✅ Built-in performance metrics
// ✅ Partial exits at multiple TP levels
// ✅ Labels always show (with filter/trade status indicators)
//
// DEVELOPMENT ROADMAP:
//
// PHASE 1: Core Engine (IN PROGRESS - Strategy Framework Complete!)
// [✅] External signal ingestion system (with demo connector)
// [✅] Strategy-based trade tracking using TradingView backtester
// [✅] Multi-level TP/SL system (TP1, TP2, TP3 with partial exits)
// [✅] Visual feedback system (labels always show with status indicators)
// [✅] Performance analysis using strategy.* built-in metrics
// [ ] Sequence analysis enhancement (detailed TP level hit tracking)
// [ ] Cooldown and rate limiting optimization
//
// PHASE 2: Statistical Analysis (NEXT)
// [ ] Enhanced TP level success rate analysis (90%, 70%, 50% targets)
// [ ] Advanced drawdown analysis during trade lifecycle
// [ ] Machine learning integration for signal confidence scoring
// [ ] Dynamic TP/SL optimization based on market conditions
// [ ] Cross-timeframe signal validation
//
// PHASE 3: Advanced Filtering & Dashboard (PENDING)
// [ ] Multi-criteria filtering system with weighted scoring
// [ ] Real-time dashboard with live trade monitoring
// [ ] Risk-reward ratio optimization
// [ ] Market condition adaptive filters
// [ ] Performance heatmaps and analytics
//
// PHASE 4: Alerts & Integration (PENDING)
// [ ] Discord webhook integration with rich embeds
// [ ] Multi-platform alert distribution
// [ ] Custom webhook formats for different platforms
// [ ] Portfolio-level alert aggregation
// [ ] Alert rate limiting and spam prevention
//
// PHASE 5: Production & Optimization (PENDING)
// [ ] High-frequency optimization for watchlist scanning
// [ ] Memory and CPU usage optimization
// [ ] Cross-asset compatibility testing
// [ ] Edge case handling and error recovery
// [ ] Production deployment documentation
